// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://bqnikzglarxcwbtdaqbe.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImJxbmlremdsYXJ4Y3didGRhcWJlIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDM4ODcwNzEsImV4cCI6MjA1OTQ2MzA3MX0.8D_3fCWgabVRkQ6O4yO8QRmjswxm85DbyKOY2UMvpGM";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY);

// Export type-safe helper types for table references
export type Tables = Database['public']['Tables']
export type ProductRow = Tables['products']['Row']
export type ProductInsert = Tables['products']['Insert'] 
export type ProductUpdate = Tables['products']['Update']
export type TransactionRow = Tables['transactions']['Row']
export type TransactionInsert = Tables['transactions']['Insert']
export type TransactionUpdate = Tables['transactions']['Update']
export type ServiceRow = Tables['services']['Row']
export type ServiceInsert = Tables['services']['Insert']
export type ServiceUpdate = Tables['services']['Update']
export type FinanceRow = Tables['finances']['Row']
export type FinanceInsert = Tables['finances']['Insert']
export type FinanceUpdate = Tables['finances']['Update']
export type SaleRow = Tables['sales']['Row']
export type SaleInsert = Tables['sales']['Insert']
export type SaleUpdate = Tables['sales']['Update']

// Update TransactionInsert to include sale_id
export type ExtendedTransactionInsert = {
  product_id: string;
  product_name: string;
  quantity: number;
  price: number;
  type: string;
  date?: string;
  user_id: string;
  user_name: string;
  sale_id?: string;
  created_at?: string;
  discount?: number;
  original_price?: number;
};

// Define RPC result types for better type safety
export type RpcSaleResult = {
  id: string;
  date: string;
  total_amount: number;
  user_id: string;
  user_name: string;
  payment_method?: string | null;
  notes?: string | null;
  created_at: string;
};

export type RpcTransactionResult = {
  id: string;
  product_id: string;
  product_name: string;
  quantity: number;
  price: number;
  type: string;
  date: string;
  user_id: string;
  user_name: string;
  sale_id?: string | null;
  created_at: string;
};

// Add imageUrl mapping helper to standardize with our model
export const mapProductRowToProduct = (row: ProductRow) => ({
  id: row.id,
  name: row.name,
  description: row.description || '',
  stockQuantity: row.stock_quantity,
  costPrice: row.cost_price,
  sellPrice: row.sell_price,
  category: row.category,
  lowStockThreshold: row.low_stock_threshold,
  imageUrl: undefined, // The database doesn't have this field
  lastRestocked: row.last_restocked ? new Date(row.last_restocked) : undefined,
  size: row.size ?? undefined,
  ingredients: row.ingredients ?? undefined,
  skinConcerns: row.skin_concerns ?? undefined
});

// Add mapping helpers for the new Service and Finance types
export const mapServiceRowToService = (row: ServiceRow) => ({
  id: row.id,
  name: row.name,
  description: row.description || '',
  price: row.price
});

export const mapFinanceRowToFinanceRecord = (row: FinanceRow) => ({
  id: row.id,
  type: row.type as 'income' | 'expense',
  date: new Date(row.date),
  amount: row.amount,
  description: row.description || undefined,
  customerName: row.customer_name || undefined,
  serviceId: row.service_id || undefined,
  paymentMethod: row.payment_method || undefined,
  vendor: row.vendor || undefined,
  category: row.category || undefined,
  tipAmount: row.tip_amount || 0
});

export const mapTransactionRowToTransaction = (row: TransactionRow | RpcTransactionResult) => ({
  id: row.id,
  productId: row.product_id,
  productName: row.product_name,
  quantity: row.quantity,
  price: row.price,
  type: row.type as 'sale' | 'restock' | 'adjustment' | 'return',
  date: new Date(row.date),
  userId: row.user_id,
  userName: row.user_name,
  saleId: row.sale_id || undefined
});

export const mapSaleRowToSale = (row: SaleRow | RpcSaleResult) => ({
  id: row.id,
  date: new Date(row.date),
  totalAmount: row.total_amount,
  userId: row.user_id,
  userName: row.user_name,
  paymentMethod: row.payment_method || undefined,
  notes: row.notes || undefined,
  discount: (row as any).discount || undefined,           // Keep discount field here
  originalTotal: (row as any).original_total || undefined // Keep original total field here
});
